---
title: "Class/Lab 6: R Functions"
author: "Nathaniel Nono (PID: A16782656)"
format: pdf
---

# Background

Today we are going to explore R functions and begin to think about writing our own function

Every function has at least 3 things:

- A **name** that we pick
- One or more input **arguments**
- The **body**, whether the work actually gets done


```{r}
add <- function(x, y) {
  x + y
}
```


> Using the `add()` function

```{r}
add(1, 1)
```

```{r}
# R allows function to iterate over a vector
add_vector <- c(10, 1, 1, 10)
add(add_vector, 1)
```

```{r}
# Only 1 argument
# Uncomment function below to show to an error
# add(10)
# add(10, 10, 20)
```



```{r}
# Able to override the default behavior
mean(c(10, 10, NA), na.rm = T)
```

# Lab Sheet work

## Question 1

> Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]


Given vectors that show the scores of the students
- student1: 90 should be dropped
- student2: Doing ok w/ one missing grade that should be dropped
- student3: Student has dropped

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Before writing a function just write some code to do some work

Calculating the average for student 1
```{r}
student1
mean(student1)
```

Calculating the average for student 2
```{r}
student2

# This will lead to a NA return because there is a missing assignment
# mean(student2)

# This will pass over the NA
mean(student2, na.rm = T)
```

Calculating the average for student 3 -> Leads to more problems...
```{r}
student3

# This is not really that fair since their average is still a 90 despite dropping
mean(student3, na.rm = T)
```


Need to make the code a bit more complicated
- Want to calculate the average -> Use `mean()`
- Want to drop the lowest score
- Want to make it known if there are many `NA` scores

We can try the `min()` function to find the lowest score:

```{r}
min(student1)
```

I want to find the location of the min value not the value itself. For this I can use `which.min()`

```{r}
student1
which.min(student1)
```

Current progress code explained from inside out
- Get the vector for student1
- Grab the minimum value
- Index to subtract that value from the student1 vector
- Take the mean of the vector to get their average score

```{r}
mean(student1[-(which.min(student1))])
```

We need to deal with NA (missing values) still...

Make all NA equal to 0

```{r}
student2
x <- student2
x
is.na(x)

# Find any NA within the `x` vector and map it to
x[is.na(x)] <- 0

x
```

Progress so far
- Got code to turn all NA's into 0
- Got code to get the mean after dropping the lowest score

```{r}
# x[ is.na(x) ] <- 0
# mean(student1[-(which.min(student1))])

# Uncheck the specific x variable to make it work with a specific student
# x <- student1
# x <- student2
# x <- student3

x[ is.na(x) ] <- 0
mean(x[-(which.min(x))])

```

Let's write the function
```{r}
grade <- function(x){
  # Finds the NAs in 'x' and make them 0
  x[ is.na(x) ] <- 0
    
  # Drops the lowest value and find mean
  mean(x[-(which.min(x))])
}
```



Using the function
```{r}
grade(student1)
grade(student2)
grade(student3)
```


Using the apply function on the : `apply(dataset, margin, function)`

```{r}
gradebook <- read.csv('https://tinyurl.com/gradeinput', row.names = 1)
gradebook
```

To use `apply()` function on this `gradebook` dataset I need to decide whether I want to `apply` the `grade()` function over the rows (1) or columns (2) of the `gradebook`.

```{r}
ans <- apply(gradebook, 1, grade)
ans
```



## Question 2

> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

- Get the scores of the students
- Find the max score using the `which.max()` function


```{r}
# Which student got the highest score
which.max(ans)

# What was the highest scoring student's actual score
ans[which.max(ans)]
```

Student 18 had the highest score with a score of 94.5

## Question 3

> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]


```{r}
apply(gradebook, 2, mean, na.rm=T)
```



```{r}
masked_gradebook <- gradebook
masked_gradebook[is.na(masked_gradebook)] = 0
apply(masked_gradebook, 2, mean)
```

I could modify the grade dunction to not drop the lowest options

```{r}
grade2 <- function(x, drop.low=TRUE){
  
  # Finds the NAs in 'x' and make them 0
  x[ is.na(x) ] <- 0
   
  if(drop.low) {
    cat('Hello low')
    # Drops the lowest value and find mean
    mean(x[-(which.min(x))])
  }    
  
  else {
    out <- mean(x)
    cat('No low')
  }
  
  return(out)
    
}
```


HW 2 was the hardest due to it's lowest score compared to the other scores

## Question 4

> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

The function to calculate correlation in R is called `cor()`

```{r}
x <- c(100, 90, 80, 100)
y <- c(100, 90, 80, 100)
z <- c(80, 90, 100, 10)


cor(x,y)
cor(x,z)
```


```{r}
cor(ans, gradebook$hw1)
```
**0.4250204** = Not too strong of a correlation between grades and hw1


```{r}
cor(ans, masked_gradebook$hw5)
```


I want to `apply()` the `cor()` function over the `masked_gradebook` and use the `ans` scores for the class
- Need to spell out extra `ans` argument for `cors()`

```{r}
apply(masked_gradebook, 2, cor, y=ans)
```

hw5 had the highest correlation

## Question 5

> Q5. Make sure you save your Quarto document and can click the “Render” (or Rmark-
down”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. [1pt]

kk :)
